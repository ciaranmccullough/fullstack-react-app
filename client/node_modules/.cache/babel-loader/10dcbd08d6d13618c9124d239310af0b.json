{"ast":null,"code":"var _jsxFileName = \"/Users/ciaranmccullough/web_projects/fullstack-react-library/client/src/contexts/people.context.js\";\nimport React, { createContext, useState } from 'react';\nimport { useToasts } from 'react-toast-notifications'; // import cloneDeep from 'lodash.cloneDeep' <-- use if your objects get complex\n\nexport const LibrariesContext = createContext({\n  getLibrries: () => [],\n  addLibrary: () => {},\n  updateLibrary: () => {},\n  deleteLibrary: () => {},\n  loaded: false,\n  loading: false,\n  error: null,\n  libraries: []\n});\nexport const LibrariesProvider = props => {\n  const [libraries, setLibraries] = useState([]); // const [loading, setLoading] = useState(false);\n  // const [loaded, setLoaded] = useState(false);\n  // const [error, setError] = useState(null);\n  // const [search, setSearch] = useState(\"\");\n\n  const {\n    addToast\n  } = useToasts();\n\n  const getLibraries = libraries => {\n    setLibraries(libraries);\n  };\n\n  const addLibrary = library => {\n    setLibraries([...libraries, library]);\n  };\n\n  const updateLibrary = async (id, updates) => {\n    let newPerson = null;\n\n    try {\n      const response = await fetch(`/api/v1/people/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json' // 'Content-Type': 'application/x-www-form-urlencoded',\n\n        },\n        body: JSON.stringify(updates)\n      });\n\n      if (response.status !== 200) {\n        throw response;\n      } // Get index\n\n\n      const index = people.findIndex(person => person._id === id); // Get actual person\n\n      const oldPerson = people[index]; // Merge with updates\n\n      newPerson = { // legit use of 'var', so can be seen in catch block\n        ...oldPerson,\n        ...updates // order here is important for the override!!\n\n      }; // recreate the people array\n\n      const updatedPeople = [...people.slice(0, index), newPerson, ...people.slice(index + 1)];\n      setPeople(updatedPeople);\n      addToast(`Updated ${newPerson.firstName} ${newPerson.lastName}`, {\n        appearance: 'success'\n      });\n    } catch (err) {\n      console.log(err);\n      addToast(`Error: Failed to update ${newPerson.firstName} ${newPerson.lastName}`, {\n        appearance: 'error'\n      });\n    }\n  };\n\n  const deletePerson = async id => {\n    let deletedPerson = null;\n\n    try {\n      const response = await fetch(`/api/v1/people/${id}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json' // 'Content-Type': 'application/x-www-form-urlencoded',\n\n        }\n      });\n\n      if (response.status !== 204) {\n        throw response;\n      } // Get index\n\n\n      const index = people.findIndex(person => person._id === id);\n      deletedPerson = people[index]; // recreate the people array without that person\n\n      const updatedPeople = [...people.slice(0, index), ...people.slice(index + 1)];\n      setPeople(updatedPeople);\n      addToast(`Deleted ${deletedPerson.firstName} ${deletedPerson.lastName}`, {\n        appearance: 'success'\n      });\n    } catch (err) {\n      console.log(err);\n      addToast(`Error: Failed to update ${deletedPerson.firstName} ${deletedPerson.lastName}`, {\n        appearance: 'error'\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(PeopleContext.Provider, {\n    value: {\n      people,\n      loading,\n      error,\n      fetchPeople,\n      addPerson,\n      updatePerson,\n      deletePerson\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 5\n    }\n  }, props.children);\n};","map":{"version":3,"sources":["/Users/ciaranmccullough/web_projects/fullstack-react-library/client/src/contexts/people.context.js"],"names":["React","createContext","useState","useToasts","LibrariesContext","getLibrries","addLibrary","updateLibrary","deleteLibrary","loaded","loading","error","libraries","LibrariesProvider","props","setLibraries","addToast","getLibraries","library","id","updates","newPerson","response","fetch","method","headers","body","JSON","stringify","status","index","people","findIndex","person","_id","oldPerson","updatedPeople","slice","setPeople","firstName","lastName","appearance","err","console","log","deletePerson","deletedPerson","fetchPeople","addPerson","updatePerson","children"],"mappings":"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","sourcesContent":["import React, { createContext, useState } from 'react';\nimport { useToasts } from 'react-toast-notifications';\n// import cloneDeep from 'lodash.cloneDeep' <-- use if your objects get complex\n\nexport const LibrariesContext = createContext({\n  getLibrries: () => [],\n  addLibrary: () => {},\n  updateLibrary: () => {},\n  deleteLibrary: () => {},\n  loaded: false,\n  loading: false,\n  error: null,\n  libraries: [],\n});\n\nexport const LibrariesProvider = (props) => {\n  const [libraries, setLibraries] = useState([]);\n  // const [loading, setLoading] = useState(false);\n  // const [loaded, setLoaded] = useState(false);\n  // const [error, setError] = useState(null);\n  // const [search, setSearch] = useState(\"\");\n  const { addToast } = useToasts();\n\n  const getLibraries = (libraries) => {\n    setLibraries(libraries);\n  };\n\n  const addLibrary = (library) => {\n    setLibraries([...libraries, library]);\n  };\n\n  const updateLibrary = async (id, updates) => {\n    let newPerson = null;\n    try {\n      const response = await fetch(`/api/v1/people/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          // 'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: JSON.stringify(updates),\n      });\n      if (response.status !== 200) {\n        throw response;\n      }\n      // Get index\n      const index = people.findIndex((person) => person._id === id);\n\n      // Get actual person\n      const oldPerson = people[index];\n\n      // Merge with updates\n      newPerson = {\n        // legit use of 'var', so can be seen in catch block\n        ...oldPerson,\n        ...updates, // order here is important for the override!!\n      };\n      // recreate the people array\n      const updatedPeople = [\n        ...people.slice(0, index),\n        newPerson,\n        ...people.slice(index + 1),\n      ];\n      setPeople(updatedPeople);\n      addToast(`Updated ${newPerson.firstName} ${newPerson.lastName}`, {\n        appearance: 'success',\n      });\n    } catch (err) {\n      console.log(err);\n      addToast(\n        `Error: Failed to update ${newPerson.firstName} ${newPerson.lastName}`,\n        {\n          appearance: 'error',\n        }\n      );\n    }\n  };\n\n  const deletePerson = async (id) => {\n    let deletedPerson = null;\n    try {\n      const response = await fetch(`/api/v1/people/${id}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n          // 'Content-Type': 'application/x-www-form-urlencoded',\n        },\n      });\n      if (response.status !== 204) {\n        throw response;\n      }\n      // Get index\n      const index = people.findIndex((person) => person._id === id);\n      deletedPerson = people[index];\n      // recreate the people array without that person\n      const updatedPeople = [\n        ...people.slice(0, index),\n        ...people.slice(index + 1),\n      ];\n      setPeople(updatedPeople);\n      addToast(`Deleted ${deletedPerson.firstName} ${deletedPerson.lastName}`, {\n        appearance: 'success',\n      });\n    } catch (err) {\n      console.log(err);\n      addToast(\n        `Error: Failed to update ${deletedPerson.firstName} ${deletedPerson.lastName}`,\n        {\n          appearance: 'error',\n        }\n      );\n    }\n  };\n\n  return (\n    <PeopleContext.Provider\n      value={{\n        people,\n        loading,\n        error,\n        fetchPeople,\n        addPerson,\n        updatePerson,\n        deletePerson,\n      }}\n    >\n      {props.children}\n    </PeopleContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}