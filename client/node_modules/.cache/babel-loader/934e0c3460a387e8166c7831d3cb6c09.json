{"ast":null,"code":"var _jsxFileName = \"/Users/ciaranmccullough/web_projects/fullstack-react-library/client/src/contexts/people.context.js\";\nimport React, { createContext, useState } from 'react';\nimport { useToasts } from 'react-toast-notifications'; // import cloneDeep from 'lodash.cloneDeep' <-- use if your objects get complex\n\nexport const LibrariesContext = createContext({\n  fetchLibrries: () => [],\n  addLibrary: () => {},\n  updateLibrary: () => {},\n  deleteLibrary: () => {},\n  loaded: false,\n  loading: false,\n  error: null,\n  libraries: []\n});\nexport const LibrariesProvider = props => {\n  const [libraries, setLibraries] = useState([]); // const [loading, setLoading] = useState(false);\n  // const [loaded, setLoaded] = useState(false);\n  // const [error, setError] = useState(null);\n  // const [search, setSearch] = useState(\"\");\n\n  const {\n    addToast\n  } = useToasts();\n\n  const fetchLibraries = async () => {\n    // console.log('loading', loading);\n    // console.log('error', error);\n    if (loading || loaded || error) {\n      return;\n    } else {\n      setLoading(true);\n    }\n\n    try {\n      const response = await fetch('/api/v1/people');\n\n      if (response.status !== 200) {\n        throw response;\n      }\n\n      const data = await response.json();\n      setLibraries(data); // setLoading(false);\n      // console.log('people from context', people);\n    } catch (err) {\n      setError(err.message || err.statusText);\n    } finally {\n      setLoading(false);\n      setLoaded('true');\n    }\n  };\n\n  const addPerson = async formData => {\n    try {\n      const response = await fetch('/api/v1/people', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json' // 'Content-Type': 'application/x-www-form-urlencoded',\n\n        },\n        body: JSON.stringify(formData)\n      });\n\n      if (response.status !== 201) {\n        throw response;\n      }\n\n      const savedPerson = await response.json();\n      console.log('got data', savedPerson);\n      setPeople([...people, savedPerson]);\n      addToast(`Saved ${savedPerson.firstName} ${savedPerson.lastName}`, {\n        appearance: 'success'\n      });\n    } catch (err) {\n      console.log(err);\n      addToast(`Error ${err.message || err.statusText}`, {\n        appearance: 'error'\n      });\n    }\n  };\n\n  const updatePerson = async (id, updates) => {\n    let newPerson = null;\n\n    try {\n      const response = await fetch(`/api/v1/people/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json' // 'Content-Type': 'application/x-www-form-urlencoded',\n\n        },\n        body: JSON.stringify(updates)\n      });\n\n      if (response.status !== 200) {\n        throw response;\n      } // Get index\n\n\n      const index = people.findIndex(person => person._id === id); // Get actual person\n\n      const oldPerson = people[index]; // Merge with updates\n\n      newPerson = { // legit use of 'var', so can be seen in catch block\n        ...oldPerson,\n        ...updates // order here is important for the override!!\n\n      }; // recreate the people array\n\n      const updatedPeople = [...people.slice(0, index), newPerson, ...people.slice(index + 1)];\n      setPeople(updatedPeople);\n      addToast(`Updated ${newPerson.firstName} ${newPerson.lastName}`, {\n        appearance: 'success'\n      });\n    } catch (err) {\n      console.log(err);\n      addToast(`Error: Failed to update ${newPerson.firstName} ${newPerson.lastName}`, {\n        appearance: 'error'\n      });\n    }\n  };\n\n  const deletePerson = async id => {\n    let deletedPerson = null;\n\n    try {\n      const response = await fetch(`/api/v1/people/${id}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json' // 'Content-Type': 'application/x-www-form-urlencoded',\n\n        }\n      });\n\n      if (response.status !== 204) {\n        throw response;\n      } // Get index\n\n\n      const index = people.findIndex(person => person._id === id);\n      deletedPerson = people[index]; // recreate the people array without that person\n\n      const updatedPeople = [...people.slice(0, index), ...people.slice(index + 1)];\n      setPeople(updatedPeople);\n      addToast(`Deleted ${deletedPerson.firstName} ${deletedPerson.lastName}`, {\n        appearance: 'success'\n      });\n    } catch (err) {\n      console.log(err);\n      addToast(`Error: Failed to update ${deletedPerson.firstName} ${deletedPerson.lastName}`, {\n        appearance: 'error'\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(PeopleContext.Provider, {\n    value: {\n      people,\n      loading,\n      error,\n      fetchPeople,\n      addPerson,\n      updatePerson,\n      deletePerson\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 5\n    }\n  }, props.children);\n};","map":{"version":3,"sources":["/Users/ciaranmccullough/web_projects/fullstack-react-library/client/src/contexts/people.context.js"],"names":["React","createContext","useState","useToasts","LibrariesContext","fetchLibrries","addLibrary","updateLibrary","deleteLibrary","loaded","loading","error","libraries","LibrariesProvider","props","setLibraries","addToast","fetchLibraries","setLoading","response","fetch","status","data","json","err","setError","message","statusText","setLoaded","addPerson","formData","method","headers","body","JSON","stringify","savedPerson","console","log","setPeople","people","firstName","lastName","appearance","updatePerson","id","updates","newPerson","index","findIndex","person","_id","oldPerson","updatedPeople","slice","deletePerson","deletedPerson","fetchPeople","children"],"mappings":"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","sourcesContent":["import React, { createContext, useState } from 'react';\nimport { useToasts } from 'react-toast-notifications';\n// import cloneDeep from 'lodash.cloneDeep' <-- use if your objects get complex\n\nexport const LibrariesContext = createContext({\n  fetchLibrries: () => [],\n  addLibrary: () => {},\n  updateLibrary: () => {},\n  deleteLibrary: () => {},\n  loaded: false,\n  loading: false,\n  error: null,\n  libraries: [],\n});\n\nexport const LibrariesProvider = (props) => {\n  const [libraries, setLibraries] = useState([]);\n  // const [loading, setLoading] = useState(false);\n  // const [loaded, setLoaded] = useState(false);\n  // const [error, setError] = useState(null);\n  // const [search, setSearch] = useState(\"\");\n  const { addToast } = useToasts();\n\n  const fetchLibraries = async () => {\n    // console.log('loading', loading);\n    // console.log('error', error);\n    if (loading || loaded || error) {\n      return;\n    } else {\n      setLoading(true);\n    }\n    try {\n      const response = await fetch('/api/v1/people');\n      if (response.status !== 200) {\n        throw response;\n      }\n      const data = await response.json();\n      setLibraries(data);\n      // setLoading(false);\n      // console.log('people from context', people);\n    } catch (err) {\n      setError(err.message || err.statusText);\n    } finally {\n      setLoading(false);\n      setLoaded('true');\n    }\n  };\n\n  const addPerson = async (formData) => {\n    try {\n      const response = await fetch('/api/v1/people', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          // 'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: JSON.stringify(formData),\n      });\n      if (response.status !== 201) {\n        throw response;\n      }\n      const savedPerson = await response.json();\n      console.log('got data', savedPerson);\n      setPeople([...people, savedPerson]);\n      addToast(`Saved ${savedPerson.firstName} ${savedPerson.lastName}`, {\n        appearance: 'success',\n      });\n    } catch (err) {\n      console.log(err);\n      addToast(`Error ${err.message || err.statusText}`, {\n        appearance: 'error',\n      });\n    }\n  };\n\n  const updatePerson = async (id, updates) => {\n    let newPerson = null;\n    try {\n      const response = await fetch(`/api/v1/people/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          // 'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: JSON.stringify(updates),\n      });\n      if (response.status !== 200) {\n        throw response;\n      }\n      // Get index\n      const index = people.findIndex((person) => person._id === id);\n\n      // Get actual person\n      const oldPerson = people[index];\n\n      // Merge with updates\n      newPerson = {\n        // legit use of 'var', so can be seen in catch block\n        ...oldPerson,\n        ...updates, // order here is important for the override!!\n      };\n      // recreate the people array\n      const updatedPeople = [\n        ...people.slice(0, index),\n        newPerson,\n        ...people.slice(index + 1),\n      ];\n      setPeople(updatedPeople);\n      addToast(`Updated ${newPerson.firstName} ${newPerson.lastName}`, {\n        appearance: 'success',\n      });\n    } catch (err) {\n      console.log(err);\n      addToast(\n        `Error: Failed to update ${newPerson.firstName} ${newPerson.lastName}`,\n        {\n          appearance: 'error',\n        }\n      );\n    }\n  };\n\n  const deletePerson = async (id) => {\n    let deletedPerson = null;\n    try {\n      const response = await fetch(`/api/v1/people/${id}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n          // 'Content-Type': 'application/x-www-form-urlencoded',\n        },\n      });\n      if (response.status !== 204) {\n        throw response;\n      }\n      // Get index\n      const index = people.findIndex((person) => person._id === id);\n      deletedPerson = people[index];\n      // recreate the people array without that person\n      const updatedPeople = [\n        ...people.slice(0, index),\n        ...people.slice(index + 1),\n      ];\n      setPeople(updatedPeople);\n      addToast(`Deleted ${deletedPerson.firstName} ${deletedPerson.lastName}`, {\n        appearance: 'success',\n      });\n    } catch (err) {\n      console.log(err);\n      addToast(\n        `Error: Failed to update ${deletedPerson.firstName} ${deletedPerson.lastName}`,\n        {\n          appearance: 'error',\n        }\n      );\n    }\n  };\n\n  return (\n    <PeopleContext.Provider\n      value={{\n        people,\n        loading,\n        error,\n        fetchPeople,\n        addPerson,\n        updatePerson,\n        deletePerson,\n      }}\n    >\n      {props.children}\n    </PeopleContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}