{"ast":null,"code":"var _jsxFileName = \"/Users/ciaranmccullough/web_projects/fullstack-react-library/client/src/contexts/people.context.js\";\nimport React, { createContext, useState } from 'react';\nimport { useToasts } from 'react-toast-notifications'; // import cloneDeep from 'lodash.cloneDeep' <-- use if your objects get complex\n\nexport const LibrariesContext = createContext({\n  getLibrries: () => [],\n  addLibrary: () => {},\n  updateLibrary: () => {},\n  deleteLibrary: () => {},\n  loaded: false,\n  loading: false,\n  error: null,\n  libraries: []\n});\nexport const LibrariesProvider = props => {\n  const [libraries, setLibraries] = useState([]); // const [loading, setLoading] = useState(false);\n  // const [loaded, setLoaded] = useState(false);\n  // const [error, setError] = useState(null);\n  // const [search, setSearch] = useState(\"\");\n\n  const {\n    addToast\n  } = useToasts();\n\n  const getLibraries = libraries => {\n    setLibraries(libraries);\n  };\n\n  const addLibrary = library => {\n    setLibraries([...libraries, library]);\n  };\n\n  const updateLibrary = (id, updates) => {\n    let newPerson = null; // Get index\n\n    const index = libraries.findIndex(library => library._id === id); // Get actual person\n\n    const oldLibrary = libraries[index]; // Merge with updates\n\n    newLibrary = { // legit use of 'var', so can be seen in catch block\n      ...oldLibrary,\n      ...updates // order here is important for the override!!\n\n    }; // recreate the libs array\n\n    const updatedLibrary = [...libraries.slice(0, index), newLibrary, ...libraries.slice(index + 1)];\n    setLibraries(updatedLibrary);\n    addToast(`Updated ${newLibrary.name}`, {\n      appearance: 'success'\n    });\n  };\n\n  const deleteLibrary = id => {\n    let deletedLibrary = null; // Get index\n\n    const index = people.findIndex(person => person._id === id);\n    deletedPerson = people[index]; // recreate the people array without that person\n\n    const updatedPeople = [...people.slice(0, index), ...people.slice(index + 1)];\n    setPeople(updatedPeople);\n    addToast(`Deleted ${deletedPerson.firstName} ${deletedPerson.lastName}`, {\n      appearance: 'success'\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(PeopleContext.Provider, {\n    value: {\n      people,\n      loading,\n      error,\n      fetchPeople,\n      addPerson,\n      updatePerson,\n      deletePerson\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, props.children);\n};","map":{"version":3,"sources":["/Users/ciaranmccullough/web_projects/fullstack-react-library/client/src/contexts/people.context.js"],"names":["React","createContext","useState","useToasts","LibrariesContext","getLibrries","addLibrary","updateLibrary","deleteLibrary","loaded","loading","error","libraries","LibrariesProvider","props","setLibraries","addToast","getLibraries","library","id","updates","newPerson","index","findIndex","_id","oldLibrary","newLibrary","updatedLibrary","slice","name","appearance","deletedLibrary","people","person","deletedPerson","updatedPeople","setPeople","firstName","lastName","fetchPeople","addPerson","updatePerson","deletePerson","children"],"mappings":"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","sourcesContent":["import React, { createContext, useState } from 'react';\nimport { useToasts } from 'react-toast-notifications';\n// import cloneDeep from 'lodash.cloneDeep' <-- use if your objects get complex\n\nexport const LibrariesContext = createContext({\n  getLibrries: () => [],\n  addLibrary: () => {},\n  updateLibrary: () => {},\n  deleteLibrary: () => {},\n  loaded: false,\n  loading: false,\n  error: null,\n  libraries: [],\n});\n\nexport const LibrariesProvider = (props) => {\n  const [libraries, setLibraries] = useState([]);\n  // const [loading, setLoading] = useState(false);\n  // const [loaded, setLoaded] = useState(false);\n  // const [error, setError] = useState(null);\n  // const [search, setSearch] = useState(\"\");\n  const { addToast } = useToasts();\n\n  const getLibraries = (libraries) => {\n    setLibraries(libraries);\n  };\n\n  const addLibrary = (library) => {\n    setLibraries([...libraries, library]);\n  };\n\n  const updateLibrary = (id, updates) => {\n    let newPerson = null;\n\n    // Get index\n    const index = libraries.findIndex((library) => library._id === id);\n\n    // Get actual person\n    const oldLibrary = libraries[index];\n\n    // Merge with updates\n    newLibrary = {\n      // legit use of 'var', so can be seen in catch block\n      ...oldLibrary,\n      ...updates, // order here is important for the override!!\n    };\n    // recreate the libs array\n    const updatedLibrary = [\n      ...libraries.slice(0, index),\n      newLibrary,\n      ...libraries.slice(index + 1),\n    ];\n    setLibraries(updatedLibrary);\n    addToast(`Updated ${newLibrary.name}`, {\n      appearance: 'success',\n    });\n  };\n\n  const deleteLibrary = (id) => {\n    let deletedLibrary = null;\n\n    // Get index\n    const index = people.findIndex((person) => person._id === id);\n    deletedPerson = people[index];\n    // recreate the people array without that person\n    const updatedPeople = [\n      ...people.slice(0, index),\n      ...people.slice(index + 1),\n    ];\n    setPeople(updatedPeople);\n    addToast(`Deleted ${deletedPerson.firstName} ${deletedPerson.lastName}`, {\n      appearance: 'success',\n    });\n  };\n\n  return (\n    <PeopleContext.Provider\n      value={{\n        people,\n        loading,\n        error,\n        fetchPeople,\n        addPerson,\n        updatePerson,\n        deletePerson,\n      }}\n    >\n      {props.children}\n    </PeopleContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}