{"ast":null,"code":"var _jsxFileName = \"/Users/ciaranmccullough/web_projects/fullstack-react-library/client/src/contexts/books.context.js\";\nimport React from 'react';\nimport { createContext, useState } from 'react';\nimport { useToasts } from 'react-toast-notifications'; // import cloneDeep from 'lodash.cloneDeep' <-- use if your objects get complex\n// import {PeopleContext} from './people.context';\n\nexport const BooksContext = createContext({\n  getBooks: () => [],\n  addBook: () => [],\n  updateBook: () => [],\n  deleteBook: () => [],\n  books: []\n});\nexport const BooksProvider = props => {\n  const [books, setBooks] = useState([]);\n  const {\n    addToast\n  } = useToasts();\n\n  const getBooks = books => {\n    setBooks(books);\n  };\n\n  const addBook = book => {\n    setBooks([...books, book]);\n  };\n\n  const updateBook = (id, updates) => {\n    let newBook = null; // Get index\n\n    const index = books.findIndex(book => book._id === id); // Get actual book\n\n    const oldBook = books[index];\n    console.log('here', oldBook); // Merge with updates\n\n    newBook = { ...oldBook,\n      ...updates // Overrides oldBook\n\n    }; // Recreate the books array\n\n    const updatedBooks = [...books.slice(0, index), newBook, ...books.slice(index + 1)];\n    setBooks(updatedBooks);\n    addToast(`Updated ${newBook.title}`, {\n      appearance: 'success'\n    });\n  };\n\n  const deleteBook = id => {\n    let deletedBook = null; // Get index\n\n    const index = books.findIndex(book => book.id === id);\n    deletedBook = books[index]; // Recreate the books array without deleted book\n\n    const updatedBooks = [...books.slice(0, index), ...books.slice(index + 1)];\n    setBooks(updatedBooks);\n    addToast(`Deleted ${deletedBook.title}`, {\n      appearance: 'success'\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(BooksContext.Provider, {\n    value: {\n      books,\n      getBooks,\n      addBook,\n      updateBook,\n      deleteBook\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, props.children);\n};","map":{"version":3,"sources":["/Users/ciaranmccullough/web_projects/fullstack-react-library/client/src/contexts/books.context.js"],"names":["React","createContext","useState","useToasts","BooksContext","getBooks","addBook","updateBook","deleteBook","books","BooksProvider","props","setBooks","addToast","book","id","updates","newBook","index","findIndex","_id","oldBook","console","log","updatedBooks","slice","title","appearance","deletedBook","children"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { createContext, useState } from 'react';\nimport { useToasts } from 'react-toast-notifications';\n// import cloneDeep from 'lodash.cloneDeep' <-- use if your objects get complex\n// import {PeopleContext} from './people.context';\n\nexport const BooksContext = createContext({\n  getBooks: () => [],\n  addBook: () => [],\n  updateBook: () => [],\n  deleteBook: () => [],\n  books: [],\n});\n\nexport const BooksProvider = (props) => {\n  const [books, setBooks] = useState([]);\n  const { addToast } = useToasts();\n\n  const getBooks = (books) => {\n    setBooks(books);\n  };\n\n  const addBook = (book) => {\n    setBooks([...books, book]);\n  };\n\n  const updateBook = (id, updates) => {\n    let newBook = null;\n    // Get index\n    const index = books.findIndex((book) => book._id === id);\n\n    // Get actual book\n    const oldBook = books[index];\n    console.log('here', oldBook);\n\n    // Merge with updates\n    newBook = {\n      ...oldBook,\n      ...updates, // Overrides oldBook\n    };\n\n    // Recreate the books array\n    const updatedBooks = [\n      ...books.slice(0, index),\n      newBook,\n      ...books.slice(index + 1),\n    ];\n\n    setBooks(updatedBooks);\n    addToast(`Updated ${newBook.title}`, {\n      appearance: 'success',\n    });\n  };\n\n  const deleteBook = (id) => {\n    let deletedBook = null;\n\n    // Get index\n    const index = books.findIndex((book) => book.id === id);\n    deletedBook = books[index];\n\n    // Recreate the books array without deleted book\n    const updatedBooks = [...books.slice(0, index), ...books.slice(index + 1)];\n\n    setBooks(updatedBooks);\n    addToast(`Deleted ${deletedBook.title}`, {\n      appearance: 'success',\n    });\n  };\n\n  return (\n    <BooksContext.Provider\n      value={{\n        books,\n        getBooks,\n        addBook,\n        updateBook,\n        deleteBook,\n      }}\n    >\n      {props.children}\n    </BooksContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}